version: 2.1

jobs:
  set_aws_env_variables:
    environment:
      OUT_DIR: buildscripts
      ECR_PUBLISH_ENV: dev
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
            name: Install jq and git
            command: |
              yum install -y jq
              yum install -y git
      - run:
          name: "Set AWS environment variables"
          command: |
            git clone -b v1.4 https://github.com/topcoder-platform/tc-deploy-scripts ${OUT_DIR}
            cd ./${OUT_DIR}
            ls -la
            sh ./awsconfiguration.sh $ECR_PUBLISH_ENV
            source awsenvconf

  build_interface_definitions:
    docker:
      - image: maven:3.8.6-openjdk-18
    environment:
      PROTOBUF_REPO: https://github.com/topcoder-platform/rdb-interface-project.git
      PROTOBUF_VERSION: v0.0.1
    steps:
      - checkout
      - restore_cache:
          keys:
            - protobuf-{{ checksum "pom.xml" }}
      - run:
          name: Download and build interface definitions
          command: |
            if [ ! -d "protobuf" ] || [ -z "$(ls -A protobuf)" ]; then
              git clone --branch ${PROTOBUF_VERSION} --depth 1 ${PROTOBUF_REPO} protobuf
              cd protobuf
              mvn clean package
            fi
      - persist_to_workspace:
          root: protobuf/target
          paths:
            - tc-dal-rdb-proto-1.0-SNAPSHOT.jar
      - save_cache:
          key: protobuf-{{ checksum "pom.xml" }}
          paths:
            - protobuf
  build:
    docker:
      - image: docker:20.10.7
    environment:
      SERVICE_NAME: "informix-access-layer"
    steps:
      - checkout
      - attach_workspace:
            at: .
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: "Build docker image"
          command: |
            docker build -t ${SERVICE_NAME} .
#            docker tag ${SERVICE_NAME} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${SERVICE_NAME}:${CIRCLE_SHA1}
#            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${SERVICE_NAME}:${CIRCLE_SHA1}

workflows:
  version: 2
  build_and_test:
    jobs:
      - set_aws_env_variables:
          context: "org-global"
          filters:
            branches:
              only: "ci/integrate-circleci"
      - build_interface_definitions:
            context: "org-global"
            requires:
                - set_aws_env_variables
      - build:
          context: "org-global"
          requires:
            - build_interface_definitions


#  release:
#    steps:
#      - checkout
#      - run:
#          name: Semantic Release
#          command: npx semantic-release
#  tag:
#    orb:
#      name: circleci/node
#    executor:
#        name: node/default
#        tag: lts
#    requires:
#      - build
#    steps:
#      - name: "Tag docker image"
#        command: |
#          docker tag ${SERVICE_NAME} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${SERVICE_NAME}:${CIRCLE_SHA1}





